{
  "info": {
    "name": "Travel Expense Tracker - Full Flow",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "col-travelexpense-001",
    "description": "Collection to test Welcome, Admin invite flow, Register, Login, Journey, Expense, Dashboard, Forgot/Reset flows."
  },
  "item": [
    {
      "name": "Flow â€” Run in order",
      "item": [
        {
          "name": "Welcome (smoke)",
          "request": {
            "method": "GET",
            "header": [],
            "url": { "raw": "{{base_url}}/", "host": ["{{base_url}}"], "path": [""] }
          },
          "response": []
        },
        {
          "name": "Admin Login",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{adminEmail}}\",\n  \"password\": \"{{adminPassword}}\"\n}"
            },
            "url": { "raw": "{{base_url}}/api/auth/login", "host": ["{{base_url}}"], "path": ["api","auth","login"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('status 200', () => pm.response.to.have.status(200));",
                  "const json = pm.response.json();",
                  "pm.test('has token', () => !!json.token );",
                  "if (json.token) pm.environment.set('adminToken', json.token);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "response": []
        },
        {
          "name": "Admin Create Invite",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" },
              { "key": "Authorization", "value": "Bearer {{adminToken}}" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{userEmail}}\",\n  \"role\": \"user\"\n}"
            },
            "url": { "raw": "{{base_url}}/api/admin/invite", "host": ["{{base_url}}"], "path": ["api","admin","invite"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('invite created (201 or 200)', () => pm.response.to.be.success);",
                  "const json = pm.response.json();",
                  "if (json.invite && json.invite.token) pm.environment.set('inviteToken', json.invite.token);",
                  "pm.test('inviteToken set', () => !!pm.environment.get('inviteToken'));"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "response": []
        },
        {
          "name": "Get Invites (admin)",
          "request": {
            "method": "GET",
            "header": [{ "key": "Authorization", "value": "Bearer {{adminToken}}" }],
            "url": { "raw": "{{base_url}}/api/admin/invites", "host": ["{{base_url}}"], "path": ["api","admin","invites"] }
          },
          "response": []
        },
        {
          "name": "User Register (with invite)",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Alice Example\",\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\",\n  \"token\": \"{{inviteToken}}\"\n}"
            },
            "url": { "raw": "{{base_url}}/api/auth/register", "host": ["{{base_url}}"], "path": ["api","auth","register"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('registered (201)', () => pm.response.to.have.status(201));",
                  "const json = pm.response.json();",
                  "if (json.token) pm.environment.set('userToken', json.token);",
                  "pm.test('userToken set', () => !!pm.environment.get('userToken'));"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "response": []
        },
        {
          "name": "User Login (verify)",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\"\n}"
            },
            "url": { "raw": "{{base_url}}/api/auth/login", "host": ["{{base_url}}"], "path": ["api","auth","login"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('login success', () => pm.response.to.have.status(200));",
                  "const json = pm.response.json();",
                  "if (json.token) pm.environment.set('userToken', json.token);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "response": []
        },
        {
          "name": "Create Journey (user)",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" },
              { "key": "Authorization", "value": "Bearer {{userToken}}" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"purpose\": \"Client visit\",\n  \"startLocation\": \"Pune\",\n  \"endLocation\": \"Mumbai\",\n  \"distance\": 150,\n  \"duration\": 240,\n  \"expectedAmount\": 1500\n}"
            },
            "url": { "raw": "{{base_url}}/api/journeys", "host": ["{{base_url}}"], "path": ["api","journeys"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('journey created', () => pm.response.to.have.status(201));",
                  "const json = pm.response.json();",
                  "if (json.journey && json.journey._id) pm.environment.set('lastJourneyId', json.journey._id);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "response": []
        },
        {
          "name": "Create Expense (user)",
          "request": {
            "method": "POST",
            "header": [
              { "key": "Content-Type", "value": "application/json" },
              { "key": "Authorization", "value": "Bearer {{userToken}}" }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"journeyId\": \"{{lastJourneyId}}\",\n  \"amount\": 300,\n  \"description\": \"Fuel\",\n  \"expenseType\": \"Fuel\"\n}"
            },
            "url": { "raw": "{{base_url}}/api/expenses", "host": ["{{base_url}}"], "path": ["api","expenses"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('expense created', () => pm.response.to.have.status(201));",
                  "const json = pm.response.json();",
                  "if (json.expense && json.expense._id) pm.environment.set('lastExpenseId', json.expense._id);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "response": []
        },
        {
          "name": "Get Dashboard (user)",
          "request": {
            "method": "GET",
            "header": [{ "key": "Authorization", "value": "Bearer {{userToken}}" }],
            "url": {
              "raw": "{{base_url}}/api/dashboard?period=this_month&recentLimit=6",
              "host": ["{{base_url}}"],
              "path": ["api","dashboard"],
              "query": [
                { "key": "period", "value": "this_month" },
                { "key": "recentLimit", "value": "6" }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('dashboard 200', () => pm.response.to.have.status(200));",
                  "const json = pm.response.json();",
                  "pm.test('has metrics', () => !!(json.data && json.data.metrics));"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "response": []
        },
        {
          "name": "Forgot Password (dev)",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{ \"email\": \"{{userEmail}}\" }" },
            "url": { "raw": "{{base_url}}/api/auth/forgot-password", "host": ["{{base_url}}"], "path": ["api","auth","forgot-password"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('forgot password 200', () => pm.response.to.have.status(200));",
                  "const json = pm.response.json();",
                  "if (json.resetToken) pm.environment.set('resetToken', json.resetToken);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "response": []
        },
        {
          "name": "Reset Password (dev)",
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{ \"password\": \"NewPass123\" }" },
            "url": { "raw": "{{base_url}}/api/auth/reset-password/{{resetToken}}", "host": ["{{base_url}}"], "path": ["api","auth","reset-password","{{resetToken}}"] }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('reset password 200', () => pm.response.to.have.status(200));"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "response": []
        },
        {
          "name": "Delete Invite (admin) - cleanup",
          "request": {
            "method": "DELETE",
            "header": [{ "key": "Authorization", "value": "Bearer {{adminToken}}" }],
            "url": { "raw": "{{base_url}}/api/admin/invite/{{inviteToken}}", "host": ["{{base_url}}"], "path": ["api","admin","invite","{{inviteToken}}"] }
          },
          "response": []
        }
      ]
    }
  ],
  "event": [],
  "variable": []
}
